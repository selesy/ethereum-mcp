// Code generated by /gen. DO NOT EDIT.

package tool

import (
	mcp "github.com/mark3labs/mcp-go/mcp"
	schema "github.com/selesy/ethereum-mcp/pkg/schema"
)

// DebugGetRawHeaderTool is an mcp.Tool that returns an RLP-encoded header.
var DebugGetRawHeaderTool = mcp.NewToolWithRawSchema("debug_getRawHeader", "Returns an RLP-encoded header.", schema.DebugGetRawHeaderSchema)

// DebugGetRawBlockTool is an mcp.Tool that returns an RLP-encoded block.
var DebugGetRawBlockTool = mcp.NewToolWithRawSchema("debug_getRawBlock", "Returns an RLP-encoded block.", schema.DebugGetRawBlockSchema)

// DebugGetRawTransactionTool is an mcp.Tool that returns an array of EIP-2718 binary-encoded transactions.
var DebugGetRawTransactionTool = mcp.NewToolWithRawSchema("debug_getRawTransaction", "Returns an array of EIP-2718 binary-encoded transactions.", schema.DebugGetRawTransactionSchema)

// DebugGetRawReceiptsTool is an mcp.Tool that returns an array of EIP-2718 binary-encoded receipts.
var DebugGetRawReceiptsTool = mcp.NewToolWithRawSchema("debug_getRawReceipts", "Returns an array of EIP-2718 binary-encoded receipts.", schema.DebugGetRawReceiptsSchema)

// DebugGetBadBlocksTool is an mcp.Tool that returns an array of recent bad blocks that the client has seen on the network.
var DebugGetBadBlocksTool = mcp.NewToolWithRawSchema("debug_getBadBlocks", "Returns an array of recent bad blocks that the client has seen on the network.", schema.DebugGetBadBlocksSchema)

// EngineGetBlobsV1Tool is an mcp.Tool that fetches blobs from the blob pool
var EngineGetBlobsV1Tool = mcp.NewToolWithRawSchema("engine_getBlobsV1", "Fetches blobs from the blob pool", schema.EngineGetBlobsV1Schema)

// EngineGetBlobsV2Tool is an mcp.Tool that fetch blobs from the blob mempool
var EngineGetBlobsV2Tool = mcp.NewToolWithRawSchema("engine_getBlobsV2", "Fetch blobs from the blob mempool", schema.EngineGetBlobsV2Schema)

// EngineExchangeCapabilitiesTool is an mcp.Tool that exchanges list of supported Engine API methods
var EngineExchangeCapabilitiesTool = mcp.NewToolWithRawSchema("engine_exchangeCapabilities", "Exchanges list of supported Engine API methods", schema.EngineExchangeCapabilitiesSchema)

// EngineForkchoiceUpdatedV1Tool is an mcp.Tool that updates the forkchoice state
var EngineForkchoiceUpdatedV1Tool = mcp.NewToolWithRawSchema("engine_forkchoiceUpdatedV1", "Updates the forkchoice state", schema.EngineForkchoiceUpdatedV1Schema)

// EngineForkchoiceUpdatedV2Tool is an mcp.Tool that updates the forkchoice state
var EngineForkchoiceUpdatedV2Tool = mcp.NewToolWithRawSchema("engine_forkchoiceUpdatedV2", "Updates the forkchoice state", schema.EngineForkchoiceUpdatedV2Schema)

// EngineForkchoiceUpdatedV3Tool is an mcp.Tool that updates the forkchoice state
var EngineForkchoiceUpdatedV3Tool = mcp.NewToolWithRawSchema("engine_forkchoiceUpdatedV3", "Updates the forkchoice state", schema.EngineForkchoiceUpdatedV3Schema)

// EngineNewPayloadV1Tool is an mcp.Tool that runs execution payload validation
var EngineNewPayloadV1Tool = mcp.NewToolWithRawSchema("engine_newPayloadV1", "Runs execution payload validation", schema.EngineNewPayloadV1Schema)

// EngineNewPayloadV2Tool is an mcp.Tool that runs execution payload validation
var EngineNewPayloadV2Tool = mcp.NewToolWithRawSchema("engine_newPayloadV2", "Runs execution payload validation", schema.EngineNewPayloadV2Schema)

// EngineNewPayloadV3Tool is an mcp.Tool that runs execution payload validation
var EngineNewPayloadV3Tool = mcp.NewToolWithRawSchema("engine_newPayloadV3", "Runs execution payload validation", schema.EngineNewPayloadV3Schema)

// EngineNewPayloadV4Tool is an mcp.Tool that runs execution payload validation
var EngineNewPayloadV4Tool = mcp.NewToolWithRawSchema("engine_newPayloadV4", "Runs execution payload validation", schema.EngineNewPayloadV4Schema)

// EngineGetPayloadV1Tool is an mcp.Tool that obtains execution payload from payload build process
var EngineGetPayloadV1Tool = mcp.NewToolWithRawSchema("engine_getPayloadV1", "Obtains execution payload from payload build process", schema.EngineGetPayloadV1Schema)

// EngineGetPayloadV2Tool is an mcp.Tool that obtains execution payload from payload build process
var EngineGetPayloadV2Tool = mcp.NewToolWithRawSchema("engine_getPayloadV2", "Obtains execution payload from payload build process", schema.EngineGetPayloadV2Schema)

// EngineGetPayloadV3Tool is an mcp.Tool that obtains execution payload from payload build process
var EngineGetPayloadV3Tool = mcp.NewToolWithRawSchema("engine_getPayloadV3", "Obtains execution payload from payload build process", schema.EngineGetPayloadV3Schema)

// EngineGetPayloadV4Tool is an mcp.Tool that obtains execution payload from payload build process
var EngineGetPayloadV4Tool = mcp.NewToolWithRawSchema("engine_getPayloadV4", "Obtains execution payload from payload build process", schema.EngineGetPayloadV4Schema)

// EngineGetPayloadV5Tool is an mcp.Tool that obtains execution payload from payload build process
var EngineGetPayloadV5Tool = mcp.NewToolWithRawSchema("engine_getPayloadV5", "Obtains execution payload from payload build process", schema.EngineGetPayloadV5Schema)

// EngineGetPayloadBodiesByHashV1Tool is an mcp.Tool that given block hashes returns bodies of the corresponding execution payloads
var EngineGetPayloadBodiesByHashV1Tool = mcp.NewToolWithRawSchema("engine_getPayloadBodiesByHashV1", "Given block hashes returns bodies of the corresponding execution payloads", schema.EngineGetPayloadBodiesByHashV1Schema)

// EngineGetPayloadBodiesByRangeV1Tool is an mcp.Tool that given a range of block numbers returns bodies of the corresponding execution payloads
var EngineGetPayloadBodiesByRangeV1Tool = mcp.NewToolWithRawSchema("engine_getPayloadBodiesByRangeV1", "Given a range of block numbers returns bodies of the corresponding execution payloads", schema.EngineGetPayloadBodiesByRangeV1Schema)

// EngineExchangeTransitionConfigurationV1Tool is an mcp.Tool that exchanges transition configuration
var EngineExchangeTransitionConfigurationV1Tool = mcp.NewToolWithRawSchema("engine_exchangeTransitionConfigurationV1", "Exchanges transition configuration", schema.EngineExchangeTransitionConfigurationV1Schema)

// EthGetBlockByHashTool is an mcp.Tool that returns information about a block by hash.
var EthGetBlockByHashTool = mcp.NewToolWithRawSchema("eth_getBlockByHash", "Returns information about a block by hash.", schema.EthGetBlockByHashSchema)

// EthGetBlockByNumberTool is an mcp.Tool that returns information about a block by number.
var EthGetBlockByNumberTool = mcp.NewToolWithRawSchema("eth_getBlockByNumber", "Returns information about a block by number.", schema.EthGetBlockByNumberSchema)

// EthGetBlockTransactionCountByHashTool is an mcp.Tool that returns the number of transactions in a block from a block matching the given block hash.
var EthGetBlockTransactionCountByHashTool = mcp.NewToolWithRawSchema("eth_getBlockTransactionCountByHash", "Returns the number of transactions in a block from a block matching the given block hash.", schema.EthGetBlockTransactionCountByHashSchema)

// EthGetBlockTransactionCountByNumberTool is an mcp.Tool that returns the number of transactions in a block matching the given block number.
var EthGetBlockTransactionCountByNumberTool = mcp.NewToolWithRawSchema("eth_getBlockTransactionCountByNumber", "Returns the number of transactions in a block matching the given block number.", schema.EthGetBlockTransactionCountByNumberSchema)

// EthGetUncleCountByBlockHashTool is an mcp.Tool that returns the number of uncles in a block from a block matching the given block hash.
var EthGetUncleCountByBlockHashTool = mcp.NewToolWithRawSchema("eth_getUncleCountByBlockHash", "Returns the number of uncles in a block from a block matching the given block hash.", schema.EthGetUncleCountByBlockHashSchema)

// EthGetUncleCountByBlockNumberTool is an mcp.Tool that returns the number of transactions in a block matching the given block number.
var EthGetUncleCountByBlockNumberTool = mcp.NewToolWithRawSchema("eth_getUncleCountByBlockNumber", "Returns the number of transactions in a block matching the given block number.", schema.EthGetUncleCountByBlockNumberSchema)

// EthGetBlockReceiptsTool is an mcp.Tool that returns the receipts of a block by number or hash.
var EthGetBlockReceiptsTool = mcp.NewToolWithRawSchema("eth_getBlockReceipts", "Returns the receipts of a block by number or hash.", schema.EthGetBlockReceiptsSchema)

// EthChainIdTool is an mcp.Tool that returns the chain ID of the current network.
var EthChainIdTool = mcp.NewToolWithRawSchema("eth_chainId", "Returns the chain ID of the current network.", schema.EthChainIdSchema)

// EthSyncingTool is an mcp.Tool that returns an object with data about the sync status or false.
var EthSyncingTool = mcp.NewToolWithRawSchema("eth_syncing", "Returns an object with data about the sync status or false.", schema.EthSyncingSchema)

// EthCoinbaseTool is an mcp.Tool that returns the client coinbase address.
var EthCoinbaseTool = mcp.NewToolWithRawSchema("eth_coinbase", "Returns the client coinbase address.", schema.EthCoinbaseSchema)

// EthAccountsTool is an mcp.Tool that returns a list of addresses owned by client.
var EthAccountsTool = mcp.NewToolWithRawSchema("eth_accounts", "Returns a list of addresses owned by client.", schema.EthAccountsSchema)

// EthBlockNumberTool is an mcp.Tool that returns the number of most recent block.
var EthBlockNumberTool = mcp.NewToolWithRawSchema("eth_blockNumber", "Returns the number of most recent block.", schema.EthBlockNumberSchema)

// EthCallTool is an mcp.Tool that executes a new message call immediately without creating a transaction on the block chain.
var EthCallTool = mcp.NewToolWithRawSchema("eth_call", "Executes a new message call immediately without creating a transaction on the block chain.", schema.EthCallSchema)

// EthEstimateGasTool is an mcp.Tool that generates and returns an estimate of how much gas is necessary to allow the transaction to complete.
var EthEstimateGasTool = mcp.NewToolWithRawSchema("eth_estimateGas", "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.", schema.EthEstimateGasSchema)

// EthCreateAccessListTool is an mcp.Tool that generates an access list for a transaction.
var EthCreateAccessListTool = mcp.NewToolWithRawSchema("eth_createAccessList", "Generates an access list for a transaction.", schema.EthCreateAccessListSchema)

// EthSimulateV1Tool is an mcp.Tool that executes a sequence of message calls building on each other's state without creating transactions on the block chain, optionally overriding block and state data
var EthSimulateV1Tool = mcp.NewToolWithRawSchema("eth_simulateV1", "Executes a sequence of message calls building on each other's state without creating transactions on the block chain, optionally overriding block and state data", schema.EthSimulateV1Schema)

// EthGasPriceTool is an mcp.Tool that returns the current price per gas in wei.
var EthGasPriceTool = mcp.NewToolWithRawSchema("eth_gasPrice", "Returns the current price per gas in wei.", schema.EthGasPriceSchema)

// EthBlobBaseFeeTool is an mcp.Tool that returns the base fee per blob gas in wei.
var EthBlobBaseFeeTool = mcp.NewToolWithRawSchema("eth_blobBaseFee", "Returns the base fee per blob gas in wei.", schema.EthBlobBaseFeeSchema)

// EthMaxPriorityFeePerGasTool is an mcp.Tool that returns the current maxPriorityFeePerGas per gas in wei.
var EthMaxPriorityFeePerGasTool = mcp.NewToolWithRawSchema("eth_maxPriorityFeePerGas", "Returns the current maxPriorityFeePerGas per gas in wei.", schema.EthMaxPriorityFeePerGasSchema)

// EthFeeHistoryTool is an mcp.Tool that returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.
var EthFeeHistoryTool = mcp.NewToolWithRawSchema("eth_feeHistory", "Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.", schema.EthFeeHistorySchema)

// EthNewFilterTool is an mcp.Tool that install a log filter in the server, allowing for later polling. Registers client interest in logs matching the filter, and returns an identifier.
var EthNewFilterTool = mcp.NewToolWithRawSchema("eth_newFilter", "Install a log filter in the server, allowing for later polling. Registers client interest in logs matching the filter, and returns an identifier.", schema.EthNewFilterSchema)

// EthNewBlockFilterTool is an mcp.Tool that creates a filter in the node, allowing for later polling. Registers client interest in new blocks, and returns an identifier.
var EthNewBlockFilterTool = mcp.NewToolWithRawSchema("eth_newBlockFilter", "Creates a filter in the node, allowing for later polling. Registers client interest in new blocks, and returns an identifier.", schema.EthNewBlockFilterSchema)

// EthNewPendingTransactionFilterTool is an mcp.Tool that creates a filter in the node, allowing for later polling. Registers client interest in new transactions, and returns an identifier.
var EthNewPendingTransactionFilterTool = mcp.NewToolWithRawSchema("eth_newPendingTransactionFilter", "Creates a filter in the node, allowing for later polling. Registers client interest in new transactions, and returns an identifier.", schema.EthNewPendingTransactionFilterSchema)

// EthUninstallFilterTool is an mcp.Tool that uninstalls a filter with given id.
var EthUninstallFilterTool = mcp.NewToolWithRawSchema("eth_uninstallFilter", "Uninstalls a filter with given id.", schema.EthUninstallFilterSchema)

// EthGetFilterChangesTool is an mcp.Tool that polling method for the filter with the given ID (created using `eth_newFilter`). Returns an array of logs, block hashes, or transaction hashes since last poll, depending on the installed filter.
var EthGetFilterChangesTool = mcp.NewToolWithRawSchema("eth_getFilterChanges", "Polling method for the filter with the given ID (created using `eth_newFilter`). Returns an array of logs, block hashes, or transaction hashes since last poll, depending on the installed filter.", schema.EthGetFilterChangesSchema)

// EthGetFilterLogsTool is an mcp.Tool that returns an array of all logs matching the filter with the given ID (created using `eth_newFilter`).
var EthGetFilterLogsTool = mcp.NewToolWithRawSchema("eth_getFilterLogs", "Returns an array of all logs matching the filter with the given ID (created using `eth_newFilter`).", schema.EthGetFilterLogsSchema)

// EthGetLogsTool is an mcp.Tool that returns an array of all logs matching the specified filter.
var EthGetLogsTool = mcp.NewToolWithRawSchema("eth_getLogs", "Returns an array of all logs matching the specified filter.", schema.EthGetLogsSchema)

// EthSignTool is an mcp.Tool that returns an EIP-191 signature over the provided data.
var EthSignTool = mcp.NewToolWithRawSchema("eth_sign", "Returns an EIP-191 signature over the provided data.", schema.EthSignSchema)

// EthSignTransactionTool is an mcp.Tool that returns an RLP encoded transaction signed by the specified account.
var EthSignTransactionTool = mcp.NewToolWithRawSchema("eth_signTransaction", "Returns an RLP encoded transaction signed by the specified account.", schema.EthSignTransactionSchema)

// EthGetBalanceTool is an mcp.Tool that returns the balance of the account of given address.
var EthGetBalanceTool = mcp.NewToolWithRawSchema("eth_getBalance", "Returns the balance of the account of given address.", schema.EthGetBalanceSchema)

// EthGetStorageAtTool is an mcp.Tool that returns the value from a storage position at a given address.
var EthGetStorageAtTool = mcp.NewToolWithRawSchema("eth_getStorageAt", "Returns the value from a storage position at a given address.", schema.EthGetStorageAtSchema)

// EthGetTransactionCountTool is an mcp.Tool that returns the nonce of an account in the state. NOTE: The name eth_getTransactionCount reflects the historical fact that an account's nonce and sent transaction count were the same. After the Pectra fork, with the inclusion of EIP-7702, this is no longer true.
var EthGetTransactionCountTool = mcp.NewToolWithRawSchema("eth_getTransactionCount", "Returns the nonce of an account in the state. NOTE: The name eth_getTransactionCount reflects the historical fact that an account's nonce and sent transaction count were the same. After the Pectra fork, with the inclusion of EIP-7702, this is no longer true.", schema.EthGetTransactionCountSchema)

// EthGetCodeTool is an mcp.Tool that returns code at a given address.
var EthGetCodeTool = mcp.NewToolWithRawSchema("eth_getCode", "Returns code at a given address.", schema.EthGetCodeSchema)

// EthGetProofTool is an mcp.Tool that returns the merkle proof for a given account and optionally some storage keys.
var EthGetProofTool = mcp.NewToolWithRawSchema("eth_getProof", "Returns the merkle proof for a given account and optionally some storage keys.", schema.EthGetProofSchema)

// EthSendTransactionTool is an mcp.Tool that signs and submits a transaction.
var EthSendTransactionTool = mcp.NewToolWithRawSchema("eth_sendTransaction", "Signs and submits a transaction.", schema.EthSendTransactionSchema)

// EthSendRawTransactionTool is an mcp.Tool that submits a raw transaction. You can create and sign a transaction externally using a library such as [web3.js](https://web3js.readthedocs.io/) or [ethers.js](https://docs.ethers.org/). For [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) transactions, the raw form must be the network form. This means it includes the blobs, KZG commitments, and KZG proofs. For [EIP-7594](https://eips.ethereum.org/EIPS/eip-7594) transactions, the raw format must be the network form. This means it includes the blobs, KZG commitments, and cell proofs. The logic for handling the new transaction during fork boundaries are 1. When receiving an encoded transaction with cell proofs before the PeerDAS fork activates, we reject it. Only blob proofs are accepted into the pool. 2. At the time of fork activation, the implementer could (not mandatory) - Drop all old-format transactions - Convert old proofs to new format (computationally expensive) - Convert only when including in a locally produced block 3. After the fork has activated, only txs with cell proofs are accepted via p2p relay. 4. On RPC (eth_sendRawTransaction), txs with blob proofs may still be accepted and will be auto-converted by the node. At implementer discretion, this facility can be deprecated later when users have switched to new client libraries that can create cell proofs.
var EthSendRawTransactionTool = mcp.NewToolWithRawSchema("eth_sendRawTransaction", "Submits a raw transaction. You can create and sign a transaction externally using a library such as [web3.js](https://web3js.readthedocs.io/) or [ethers.js](https://docs.ethers.org/). For [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) transactions, the raw form must be the network form. This means it includes the blobs, KZG commitments, and KZG proofs. For [EIP-7594](https://eips.ethereum.org/EIPS/eip-7594) transactions, the raw format must be the network form. This means it includes the blobs, KZG commitments, and cell proofs. The logic for handling the new transaction during fork boundaries are 1. When receiving an encoded transaction with cell proofs before the PeerDAS fork activates, we reject it. Only blob proofs are accepted into the pool. 2. At the time of fork activation, the implementer could (not mandatory) - Drop all old-format transactions - Convert old proofs to new format (computationally expensive) - Convert only when including in a locally produced block 3. After the fork has activated, only txs with cell proofs are accepted via p2p relay. 4. On RPC (eth_sendRawTransaction), txs with blob proofs may still be accepted and will be auto-converted by the node. At implementer discretion, this facility can be deprecated later when users have switched to new client libraries that can create cell proofs.", schema.EthSendRawTransactionSchema)

// EthGetTransactionByHashTool is an mcp.Tool that returns the information about a transaction requested by transaction hash.
var EthGetTransactionByHashTool = mcp.NewToolWithRawSchema("eth_getTransactionByHash", "Returns the information about a transaction requested by transaction hash.", schema.EthGetTransactionByHashSchema)

// EthGetTransactionByBlockHashAndIndexTool is an mcp.Tool that returns information about a transaction by block hash and transaction index position.
var EthGetTransactionByBlockHashAndIndexTool = mcp.NewToolWithRawSchema("eth_getTransactionByBlockHashAndIndex", "Returns information about a transaction by block hash and transaction index position.", schema.EthGetTransactionByBlockHashAndIndexSchema)

// EthGetTransactionByBlockNumberAndIndexTool is an mcp.Tool that returns information about a transaction by block number and transaction index position.
var EthGetTransactionByBlockNumberAndIndexTool = mcp.NewToolWithRawSchema("eth_getTransactionByBlockNumberAndIndex", "Returns information about a transaction by block number and transaction index position.", schema.EthGetTransactionByBlockNumberAndIndexSchema)

// EthGetTransactionReceiptTool is an mcp.Tool that returns the receipt of a transaction by transaction hash.
var EthGetTransactionReceiptTool = mcp.NewToolWithRawSchema("eth_getTransactionReceipt", "Returns the receipt of a transaction by transaction hash.", schema.EthGetTransactionReceiptSchema)

// Tools returns a map relating method names to the associated tool.
func Tools() map[string]mcp.Tool {
	return map[string]mcp.Tool{
		"debug_getBadBlocks":                       DebugGetBadBlocksTool,
		"debug_getRawBlock":                        DebugGetRawBlockTool,
		"debug_getRawHeader":                       DebugGetRawHeaderTool,
		"debug_getRawReceipts":                     DebugGetRawReceiptsTool,
		"debug_getRawTransaction":                  DebugGetRawTransactionTool,
		"engine_exchangeCapabilities":              EngineExchangeCapabilitiesTool,
		"engine_exchangeTransitionConfigurationV1": EngineExchangeTransitionConfigurationV1Tool,
		"engine_forkchoiceUpdatedV1":               EngineForkchoiceUpdatedV1Tool,
		"engine_forkchoiceUpdatedV2":               EngineForkchoiceUpdatedV2Tool,
		"engine_forkchoiceUpdatedV3":               EngineForkchoiceUpdatedV3Tool,
		"engine_getBlobsV1":                        EngineGetBlobsV1Tool,
		"engine_getBlobsV2":                        EngineGetBlobsV2Tool,
		"engine_getPayloadBodiesByHashV1":          EngineGetPayloadBodiesByHashV1Tool,
		"engine_getPayloadBodiesByRangeV1":         EngineGetPayloadBodiesByRangeV1Tool,
		"engine_getPayloadV1":                      EngineGetPayloadV1Tool,
		"engine_getPayloadV2":                      EngineGetPayloadV2Tool,
		"engine_getPayloadV3":                      EngineGetPayloadV3Tool,
		"engine_getPayloadV4":                      EngineGetPayloadV4Tool,
		"engine_getPayloadV5":                      EngineGetPayloadV5Tool,
		"engine_newPayloadV1":                      EngineNewPayloadV1Tool,
		"engine_newPayloadV2":                      EngineNewPayloadV2Tool,
		"engine_newPayloadV3":                      EngineNewPayloadV3Tool,
		"engine_newPayloadV4":                      EngineNewPayloadV4Tool,
		"eth_accounts":                             EthAccountsTool,
		"eth_blobBaseFee":                          EthBlobBaseFeeTool,
		"eth_blockNumber":                          EthBlockNumberTool,
		"eth_call":                                 EthCallTool,
		"eth_chainId":                              EthChainIdTool,
		"eth_coinbase":                             EthCoinbaseTool,
		"eth_createAccessList":                     EthCreateAccessListTool,
		"eth_estimateGas":                          EthEstimateGasTool,
		"eth_feeHistory":                           EthFeeHistoryTool,
		"eth_gasPrice":                             EthGasPriceTool,
		"eth_getBalance":                           EthGetBalanceTool,
		"eth_getBlockByHash":                       EthGetBlockByHashTool,
		"eth_getBlockByNumber":                     EthGetBlockByNumberTool,
		"eth_getBlockReceipts":                     EthGetBlockReceiptsTool,
		"eth_getBlockTransactionCountByHash":       EthGetBlockTransactionCountByHashTool,
		"eth_getBlockTransactionCountByNumber":     EthGetBlockTransactionCountByNumberTool,
		"eth_getCode":                              EthGetCodeTool,
		"eth_getFilterChanges":                     EthGetFilterChangesTool,
		"eth_getFilterLogs":                        EthGetFilterLogsTool,
		"eth_getLogs":                              EthGetLogsTool,
		"eth_getProof":                             EthGetProofTool,
		"eth_getStorageAt":                         EthGetStorageAtTool,
		"eth_getTransactionByBlockHashAndIndex":    EthGetTransactionByBlockHashAndIndexTool,
		"eth_getTransactionByBlockNumberAndIndex":  EthGetTransactionByBlockNumberAndIndexTool,
		"eth_getTransactionByHash":                 EthGetTransactionByHashTool,
		"eth_getTransactionCount":                  EthGetTransactionCountTool,
		"eth_getTransactionReceipt":                EthGetTransactionReceiptTool,
		"eth_getUncleCountByBlockHash":             EthGetUncleCountByBlockHashTool,
		"eth_getUncleCountByBlockNumber":           EthGetUncleCountByBlockNumberTool,
		"eth_maxPriorityFeePerGas":                 EthMaxPriorityFeePerGasTool,
		"eth_newBlockFilter":                       EthNewBlockFilterTool,
		"eth_newFilter":                            EthNewFilterTool,
		"eth_newPendingTransactionFilter":          EthNewPendingTransactionFilterTool,
		"eth_sendRawTransaction":                   EthSendRawTransactionTool,
		"eth_sendTransaction":                      EthSendTransactionTool,
		"eth_sign":                                 EthSignTool,
		"eth_signTransaction":                      EthSignTransactionTool,
		"eth_simulateV1":                           EthSimulateV1Tool,
		"eth_syncing":                              EthSyncingTool,
		"eth_uninstallFilter":                      EthUninstallFilterTool,
	}
}
