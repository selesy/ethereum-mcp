// Code generated by gen/schema. DO NOT EDIT.

package schema

import (
	_ "embed"
	"encoding/json"
)

// DebugGetRawHeaderSchema returns an RLP-encoded header.
//
//go:embed data/debug_getRawHeader.json
var DebugGetRawHeaderSchema json.RawMessage

// DebugGetRawBlockSchema returns an RLP-encoded block.
//
//go:embed data/debug_getRawBlock.json
var DebugGetRawBlockSchema json.RawMessage

// DebugGetRawTransactionSchema returns an array of EIP-2718 binary-encoded transactions.
//
//go:embed data/debug_getRawTransaction.json
var DebugGetRawTransactionSchema json.RawMessage

// DebugGetRawReceiptsSchema returns an array of EIP-2718 binary-encoded receipts.
//
//go:embed data/debug_getRawReceipts.json
var DebugGetRawReceiptsSchema json.RawMessage

// DebugGetBadBlocksSchema returns an array of recent bad blocks that the client has seen on the network.
//
//go:embed data/debug_getBadBlocks.json
var DebugGetBadBlocksSchema json.RawMessage

// EngineGetBlobsV1Schema fetches blobs from the blob pool
//
//go:embed data/engine_getBlobsV1.json
var EngineGetBlobsV1Schema json.RawMessage

// EngineGetBlobsV2Schema fetch blobs from the blob mempool
//
//go:embed data/engine_getBlobsV2.json
var EngineGetBlobsV2Schema json.RawMessage

// EngineExchangeCapabilitiesSchema exchanges list of supported Engine API methods
//
//go:embed data/engine_exchangeCapabilities.json
var EngineExchangeCapabilitiesSchema json.RawMessage

// EngineForkchoiceUpdatedV1Schema updates the forkchoice state
//
//go:embed data/engine_forkchoiceUpdatedV1.json
var EngineForkchoiceUpdatedV1Schema json.RawMessage

// EngineForkchoiceUpdatedV2Schema updates the forkchoice state
//
//go:embed data/engine_forkchoiceUpdatedV2.json
var EngineForkchoiceUpdatedV2Schema json.RawMessage

// EngineForkchoiceUpdatedV3Schema updates the forkchoice state
//
//go:embed data/engine_forkchoiceUpdatedV3.json
var EngineForkchoiceUpdatedV3Schema json.RawMessage

// EngineNewPayloadV1Schema runs execution payload validation
//
//go:embed data/engine_newPayloadV1.json
var EngineNewPayloadV1Schema json.RawMessage

// EngineNewPayloadV2Schema runs execution payload validation
//
//go:embed data/engine_newPayloadV2.json
var EngineNewPayloadV2Schema json.RawMessage

// EngineNewPayloadV3Schema runs execution payload validation
//
//go:embed data/engine_newPayloadV3.json
var EngineNewPayloadV3Schema json.RawMessage

// EngineNewPayloadV4Schema runs execution payload validation
//
//go:embed data/engine_newPayloadV4.json
var EngineNewPayloadV4Schema json.RawMessage

// EngineGetPayloadV1Schema obtains execution payload from payload build process
//
//go:embed data/engine_getPayloadV1.json
var EngineGetPayloadV1Schema json.RawMessage

// EngineGetPayloadV2Schema obtains execution payload from payload build process
//
//go:embed data/engine_getPayloadV2.json
var EngineGetPayloadV2Schema json.RawMessage

// EngineGetPayloadV3Schema obtains execution payload from payload build process
//
//go:embed data/engine_getPayloadV3.json
var EngineGetPayloadV3Schema json.RawMessage

// EngineGetPayloadV4Schema obtains execution payload from payload build process
//
//go:embed data/engine_getPayloadV4.json
var EngineGetPayloadV4Schema json.RawMessage

// EngineGetPayloadV5Schema obtains execution payload from payload build process
//
//go:embed data/engine_getPayloadV5.json
var EngineGetPayloadV5Schema json.RawMessage

// EngineGetPayloadBodiesByHashV1Schema given block hashes returns bodies of the corresponding execution payloads
//
//go:embed data/engine_getPayloadBodiesByHashV1.json
var EngineGetPayloadBodiesByHashV1Schema json.RawMessage

// EngineGetPayloadBodiesByRangeV1Schema given a range of block numbers returns bodies of the corresponding execution payloads
//
//go:embed data/engine_getPayloadBodiesByRangeV1.json
var EngineGetPayloadBodiesByRangeV1Schema json.RawMessage

// EngineExchangeTransitionConfigurationV1Schema exchanges transition configuration
//
//go:embed data/engine_exchangeTransitionConfigurationV1.json
var EngineExchangeTransitionConfigurationV1Schema json.RawMessage

// EthGetBlockByHashSchema returns information about a block by hash.
//
//go:embed data/eth_getBlockByHash.json
var EthGetBlockByHashSchema json.RawMessage

// EthGetBlockByNumberSchema returns information about a block by number.
//
//go:embed data/eth_getBlockByNumber.json
var EthGetBlockByNumberSchema json.RawMessage

// EthGetBlockTransactionCountByHashSchema returns the number of transactions in a block from a block matching the given block hash.
//
//go:embed data/eth_getBlockTransactionCountByHash.json
var EthGetBlockTransactionCountByHashSchema json.RawMessage

// EthGetBlockTransactionCountByNumberSchema returns the number of transactions in a block matching the given block number.
//
//go:embed data/eth_getBlockTransactionCountByNumber.json
var EthGetBlockTransactionCountByNumberSchema json.RawMessage

// EthGetUncleCountByBlockHashSchema returns the number of uncles in a block from a block matching the given block hash.
//
//go:embed data/eth_getUncleCountByBlockHash.json
var EthGetUncleCountByBlockHashSchema json.RawMessage

// EthGetUncleCountByBlockNumberSchema returns the number of transactions in a block matching the given block number.
//
//go:embed data/eth_getUncleCountByBlockNumber.json
var EthGetUncleCountByBlockNumberSchema json.RawMessage

// EthGetBlockReceiptsSchema returns the receipts of a block by number or hash.
//
//go:embed data/eth_getBlockReceipts.json
var EthGetBlockReceiptsSchema json.RawMessage

// EthChainIdSchema returns the chain ID of the current network.
//
//go:embed data/eth_chainId.json
var EthChainIdSchema json.RawMessage

// EthSyncingSchema returns an object with data about the sync status or false.
//
//go:embed data/eth_syncing.json
var EthSyncingSchema json.RawMessage

// EthCoinbaseSchema returns the client coinbase address.
//
//go:embed data/eth_coinbase.json
var EthCoinbaseSchema json.RawMessage

// EthAccountsSchema returns a list of addresses owned by client.
//
//go:embed data/eth_accounts.json
var EthAccountsSchema json.RawMessage

// EthBlockNumberSchema returns the number of most recent block.
//
//go:embed data/eth_blockNumber.json
var EthBlockNumberSchema json.RawMessage

// EthCallSchema executes a new message call immediately without creating a transaction on the block chain.
//
//go:embed data/eth_call.json
var EthCallSchema json.RawMessage

// EthEstimateGasSchema generates and returns an estimate of how much gas is necessary to allow the transaction to complete.
//
//go:embed data/eth_estimateGas.json
var EthEstimateGasSchema json.RawMessage

// EthCreateAccessListSchema generates an access list for a transaction.
//
//go:embed data/eth_createAccessList.json
var EthCreateAccessListSchema json.RawMessage

// EthSimulateV1Schema executes a sequence of message calls building on each other's state without creating transactions on the block chain, optionally overriding block and state data
//
//go:embed data/eth_simulateV1.json
var EthSimulateV1Schema json.RawMessage

// EthGasPriceSchema returns the current price per gas in wei.
//
//go:embed data/eth_gasPrice.json
var EthGasPriceSchema json.RawMessage

// EthBlobBaseFeeSchema returns the base fee per blob gas in wei.
//
//go:embed data/eth_blobBaseFee.json
var EthBlobBaseFeeSchema json.RawMessage

// EthMaxPriorityFeePerGasSchema returns the current maxPriorityFeePerGas per gas in wei.
//
//go:embed data/eth_maxPriorityFeePerGas.json
var EthMaxPriorityFeePerGasSchema json.RawMessage

// EthFeeHistorySchema returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.
//
//go:embed data/eth_feeHistory.json
var EthFeeHistorySchema json.RawMessage

// EthNewFilterSchema install a log filter in the server, allowing for later polling. Registers client interest in logs matching the filter, and returns an identifier.
//
//go:embed data/eth_newFilter.json
var EthNewFilterSchema json.RawMessage

// EthNewBlockFilterSchema creates a filter in the node, allowing for later polling. Registers client interest in new blocks, and returns an identifier.
//
//go:embed data/eth_newBlockFilter.json
var EthNewBlockFilterSchema json.RawMessage

// EthNewPendingTransactionFilterSchema creates a filter in the node, allowing for later polling. Registers client interest in new transactions, and returns an identifier.
//
//go:embed data/eth_newPendingTransactionFilter.json
var EthNewPendingTransactionFilterSchema json.RawMessage

// EthUninstallFilterSchema uninstalls a filter with given id.
//
//go:embed data/eth_uninstallFilter.json
var EthUninstallFilterSchema json.RawMessage

// EthGetFilterChangesSchema polling method for the filter with the given ID (created using `eth_newFilter`). Returns an array of logs, block hashes, or transaction hashes since last poll, depending on the installed filter.
//
//go:embed data/eth_getFilterChanges.json
var EthGetFilterChangesSchema json.RawMessage

// EthGetFilterLogsSchema returns an array of all logs matching the filter with the given ID (created using `eth_newFilter`).
//
//go:embed data/eth_getFilterLogs.json
var EthGetFilterLogsSchema json.RawMessage

// EthGetLogsSchema returns an array of all logs matching the specified filter.
//
//go:embed data/eth_getLogs.json
var EthGetLogsSchema json.RawMessage

// EthSignSchema returns an EIP-191 signature over the provided data.
//
//go:embed data/eth_sign.json
var EthSignSchema json.RawMessage

// EthSignTransactionSchema returns an RLP encoded transaction signed by the specified account.
//
//go:embed data/eth_signTransaction.json
var EthSignTransactionSchema json.RawMessage

// EthGetBalanceSchema returns the balance of the account of given address.
//
//go:embed data/eth_getBalance.json
var EthGetBalanceSchema json.RawMessage

// EthGetStorageAtSchema returns the value from a storage position at a given address.
//
//go:embed data/eth_getStorageAt.json
var EthGetStorageAtSchema json.RawMessage

// EthGetTransactionCountSchema returns the nonce of an account in the state. NOTE: The name eth_getTransactionCount reflects the historical fact that an account's nonce and sent transaction count were the same. After the Pectra fork, with the inclusion of EIP-7702, this is no longer true.
//
//go:embed data/eth_getTransactionCount.json
var EthGetTransactionCountSchema json.RawMessage

// EthGetCodeSchema returns code at a given address.
//
//go:embed data/eth_getCode.json
var EthGetCodeSchema json.RawMessage

// EthGetProofSchema returns the merkle proof for a given account and optionally some storage keys.
//
//go:embed data/eth_getProof.json
var EthGetProofSchema json.RawMessage

// EthSendTransactionSchema signs and submits a transaction.
//
//go:embed data/eth_sendTransaction.json
var EthSendTransactionSchema json.RawMessage

// EthSendRawTransactionSchema submits a raw transaction. You can create and sign a transaction externally using a library such as [web3.js](https://web3js.readthedocs.io/) or [ethers.js](https://docs.ethers.org/). For [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) transactions, the raw form must be the network form. This means it includes the blobs, KZG commitments, and KZG proofs. For [EIP-7594](https://eips.ethereum.org/EIPS/eip-7594) transactions, the raw format must be the network form. This means it includes the blobs, KZG commitments, and cell proofs. The logic for handling the new transaction during fork boundaries are 1. When receiving an encoded transaction with cell proofs before the PeerDAS fork activates, we reject it. Only blob proofs are accepted into the pool. 2. At the time of fork activation, the implementer could (not mandatory) - Drop all old-format transactions - Convert old proofs to new format (computationally expensive) - Convert only when including in a locally produced block 3. After the fork has activated, only txs with cell proofs are accepted via p2p relay. 4. On RPC (eth_sendRawTransaction), txs with blob proofs may still be accepted and will be auto-converted by the node. At implementer discretion, this facility can be deprecated later when users have switched to new client libraries that can create cell proofs.
//
//go:embed data/eth_sendRawTransaction.json
var EthSendRawTransactionSchema json.RawMessage

// EthGetTransactionByHashSchema returns the information about a transaction requested by transaction hash.
//
//go:embed data/eth_getTransactionByHash.json
var EthGetTransactionByHashSchema json.RawMessage

// EthGetTransactionByBlockHashAndIndexSchema returns information about a transaction by block hash and transaction index position.
//
//go:embed data/eth_getTransactionByBlockHashAndIndex.json
var EthGetTransactionByBlockHashAndIndexSchema json.RawMessage

// EthGetTransactionByBlockNumberAndIndexSchema returns information about a transaction by block number and transaction index position.
//
//go:embed data/eth_getTransactionByBlockNumberAndIndex.json
var EthGetTransactionByBlockNumberAndIndexSchema json.RawMessage

// EthGetTransactionReceiptSchema returns the receipt of a transaction by transaction hash.
//
//go:embed data/eth_getTransactionReceipt.json
var EthGetTransactionReceiptSchema json.RawMessage

// Schemas returns a map relating schema names to the associated Method.
func Schemas() map[string]json.RawMessage {
	return map[string]json.RawMessage{
		"debug_getBadBlocks":                       DebugGetBadBlocksSchema,
		"debug_getRawBlock":                        DebugGetRawBlockSchema,
		"debug_getRawHeader":                       DebugGetRawHeaderSchema,
		"debug_getRawReceipts":                     DebugGetRawReceiptsSchema,
		"debug_getRawTransaction":                  DebugGetRawTransactionSchema,
		"engine_exchangeCapabilities":              EngineExchangeCapabilitiesSchema,
		"engine_exchangeTransitionConfigurationV1": EngineExchangeTransitionConfigurationV1Schema,
		"engine_forkchoiceUpdatedV1":               EngineForkchoiceUpdatedV1Schema,
		"engine_forkchoiceUpdatedV2":               EngineForkchoiceUpdatedV2Schema,
		"engine_forkchoiceUpdatedV3":               EngineForkchoiceUpdatedV3Schema,
		"engine_getBlobsV1":                        EngineGetBlobsV1Schema,
		"engine_getBlobsV2":                        EngineGetBlobsV2Schema,
		"engine_getPayloadBodiesByHashV1":          EngineGetPayloadBodiesByHashV1Schema,
		"engine_getPayloadBodiesByRangeV1":         EngineGetPayloadBodiesByRangeV1Schema,
		"engine_getPayloadV1":                      EngineGetPayloadV1Schema,
		"engine_getPayloadV2":                      EngineGetPayloadV2Schema,
		"engine_getPayloadV3":                      EngineGetPayloadV3Schema,
		"engine_getPayloadV4":                      EngineGetPayloadV4Schema,
		"engine_getPayloadV5":                      EngineGetPayloadV5Schema,
		"engine_newPayloadV1":                      EngineNewPayloadV1Schema,
		"engine_newPayloadV2":                      EngineNewPayloadV2Schema,
		"engine_newPayloadV3":                      EngineNewPayloadV3Schema,
		"engine_newPayloadV4":                      EngineNewPayloadV4Schema,
		"eth_accounts":                             EthAccountsSchema,
		"eth_blobBaseFee":                          EthBlobBaseFeeSchema,
		"eth_blockNumber":                          EthBlockNumberSchema,
		"eth_call":                                 EthCallSchema,
		"eth_chainId":                              EthChainIdSchema,
		"eth_coinbase":                             EthCoinbaseSchema,
		"eth_createAccessList":                     EthCreateAccessListSchema,
		"eth_estimateGas":                          EthEstimateGasSchema,
		"eth_feeHistory":                           EthFeeHistorySchema,
		"eth_gasPrice":                             EthGasPriceSchema,
		"eth_getBalance":                           EthGetBalanceSchema,
		"eth_getBlockByHash":                       EthGetBlockByHashSchema,
		"eth_getBlockByNumber":                     EthGetBlockByNumberSchema,
		"eth_getBlockReceipts":                     EthGetBlockReceiptsSchema,
		"eth_getBlockTransactionCountByHash":       EthGetBlockTransactionCountByHashSchema,
		"eth_getBlockTransactionCountByNumber":     EthGetBlockTransactionCountByNumberSchema,
		"eth_getCode":                              EthGetCodeSchema,
		"eth_getFilterChanges":                     EthGetFilterChangesSchema,
		"eth_getFilterLogs":                        EthGetFilterLogsSchema,
		"eth_getLogs":                              EthGetLogsSchema,
		"eth_getProof":                             EthGetProofSchema,
		"eth_getStorageAt":                         EthGetStorageAtSchema,
		"eth_getTransactionByBlockHashAndIndex":    EthGetTransactionByBlockHashAndIndexSchema,
		"eth_getTransactionByBlockNumberAndIndex":  EthGetTransactionByBlockNumberAndIndexSchema,
		"eth_getTransactionByHash":                 EthGetTransactionByHashSchema,
		"eth_getTransactionCount":                  EthGetTransactionCountSchema,
		"eth_getTransactionReceipt":                EthGetTransactionReceiptSchema,
		"eth_getUncleCountByBlockHash":             EthGetUncleCountByBlockHashSchema,
		"eth_getUncleCountByBlockNumber":           EthGetUncleCountByBlockNumberSchema,
		"eth_maxPriorityFeePerGas":                 EthMaxPriorityFeePerGasSchema,
		"eth_newBlockFilter":                       EthNewBlockFilterSchema,
		"eth_newFilter":                            EthNewFilterSchema,
		"eth_newPendingTransactionFilter":          EthNewPendingTransactionFilterSchema,
		"eth_sendRawTransaction":                   EthSendRawTransactionSchema,
		"eth_sendTransaction":                      EthSendTransactionSchema,
		"eth_sign":                                 EthSignSchema,
		"eth_signTransaction":                      EthSignTransactionSchema,
		"eth_simulateV1":                           EthSimulateV1Schema,
		"eth_syncing":                              EthSyncingSchema,
		"eth_uninstallFilter":                      EthUninstallFilterSchema,
	}
}
